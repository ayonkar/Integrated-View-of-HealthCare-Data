/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DrugDiscoveryScientistDDRole;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.ResearchAndDevelopment.DrugDiscoveryOrganisation;
import Business.Organization.ResearchAndDevelopment.NewDrugApprovalOrganisation;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ClinicalDrugPhaseOneTestWorkRequest;
import Business.WorkQueue.PriclinicalWorkRequest;
import Business.WorkQueue.TiterTest;
import Business.WorkQueue.WorkRequest;
import Disease.Disease;
import Drug.ClinicalPhaseOneDrug;
import com.sun.glass.events.KeyEvent;
import java.awt.BasicStroke;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Stroke;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Date;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.labels.StandardXYItemLabelGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author Lenovo
 */
public class InVitroTestResultDetailDDJPanel extends javax.swing.JPanel {

    /**
     * Creates new form InVitroTestResultDetailDDJPanel
     */
     private  JPanel userprocesscontainer;
    private DrugDiscoveryOrganisation organization;
    private PriclinicalWorkRequest pwr; 
    private Enterprise enterprise;
    private UserAccount userAccount;
    
    
    private static final Random random = new Random();
    public InVitroTestResultDetailDDJPanel(JPanel userprocesscontainer, DrugDiscoveryOrganisation organization,PriclinicalWorkRequest pwr,Enterprise enterprise,UserAccount userAccount ) {
        initComponents();
        this.userprocesscontainer = userprocesscontainer;
        this.organization = organization;
        this.pwr = pwr;
        this.enterprise = enterprise;
        this.userAccount =  userAccount;
       
        populateComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        titerSetupjTable = new javax.swing.JTable();
        titerjComboBox = new javax.swing.JComboBox();
        rosjTextField = new javax.swing.JTextField();
        cellViabilityjTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        getDesignjButton = new javax.swing.JButton();
        dosejTextField = new javax.swing.JTextField();
        backjButton = new javax.swing.JButton();
        appriveDrugjButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 153, 153));

        titerSetupjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Titer Plate No", "Total Assay ", "Dose Level", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(titerSetupjTable);

        titerjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titerjComboBoxActionPerformed(evt);
            }
        });

        rosjTextField.setEnabled(false);

        cellViabilityjTextField.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Cell Viability");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("ROS");

        getDesignjButton.setText("Get Detail");
        getDesignjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDesignjButtonActionPerformed(evt);
            }
        });

        dosejTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dosejTextFieldKeyPressed(evt);
            }
        });

        backjButton.setText("Back");
        backjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButtonActionPerformed(evt);
            }
        });

        appriveDrugjButton.setText("Approve Drug");
        appriveDrugjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appriveDrugjButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Select Dose Level");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Titer Plate ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dosejTextField)
                            .addComponent(appriveDrugjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(backjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(titerjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getDesignjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(105, 105, 105)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cellViabilityjTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(rosjTextField))))
                .addGap(84, 84, 84))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rosjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cellViabilityjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(134, 134, 134)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dosejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(30, 30, 30)
                        .addComponent(appriveDrugjButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(titerjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)))
                        .addGap(31, 31, 31)
                        .addComponent(getDesignjButton)))
                .addGap(165, 165, 165)
                .addComponent(backjButton)
                .addGap(120, 120, 120))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void titerjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titerjComboBoxActionPerformed
        // TODO add your handling code here:

        TiterTest tt = (TiterTest)titerjComboBox.getSelectedItem();

        for(TiterTest titer:pwr.getTiterPlate()){
            if(titer.equals(tt)){
                populateTiterTable(titer);
            }
        }
      

    }//GEN-LAST:event_titerjComboBoxActionPerformed

    private void getDesignjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDesignjButtonActionPerformed
        // TODO add your handling code here:
        
        
         int selectedRow = titerSetupjTable.getSelectedRow();      

        if(selectedRow >= 0)
        {
             TiterTest titer = (TiterTest)titerSetupjTable.getValueAt(selectedRow, 0);
             if(!(titer.getTiterTest()==null)){

        
        final DefaultXYDataset dataset = new DefaultXYDataset();
        
        int y = pwr.getTiterPlate().size();
        
        for(TiterTest tt : pwr.getTiterPlate() ){
          //  System.out.println("titer "+ tt);
        int i = Integer.parseInt(String.valueOf(tt));
        dataset.addSeries("Plate "+tt , createSeries(i,tt.getTotalNumberofAssay(),tt.getCellViability()));}
        JFreeChart chart = createChart(dataset);
       // ChartPanel chartPanel = new ChartPanel(chart);      
        ChartFrame frame = new  ChartFrame("Bar Chart",chart);
        frame.setVisible(true);
        frame.setSize(1000, 900);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setLocationRelativeTo(null);
        }
              else{
                 
        JOptionPane.showMessageDialog(null,"Experiment requested are yet to be processed ");
        }
        }
          
        
		else
		{
		 JOptionPane.showMessageDialog(null,"Please Select a titer Plate form table ");
		}
        
        
    }//GEN-LAST:event_getDesignjButtonActionPerformed

    private void backjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButtonActionPerformed
        // TODO add your handling code here:
        userprocesscontainer.remove(this);
        Component[] componentArray = userprocesscontainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
//        DiscoveryDevelopmentJPanel dwjp = (DiscoveryDevelopmentJPanel) component;
//        dwjp.populateTable(organization);
        CardLayout layout = (CardLayout)userprocesscontainer.getLayout();
        layout.previous(userprocesscontainer);
    }//GEN-LAST:event_backjButtonActionPerformed

    private void appriveDrugjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appriveDrugjButtonActionPerformed
        // TODO add your handling code here:
        try{
            String EMPTY = "";
            if (!(dosejTextField.getText().equals(EMPTY)||dosejTextField.getText()==null))
            {
        ClinicalPhaseOneDrug cpd = new ClinicalPhaseOneDrug();
        cpd.setDrugID(pwr.getDrugID());
        cpd.setDrugName(pwr.getDrugName());
        cpd.setDoseLevel(Double.valueOf(dosejTextField.getText()));
        cpd.setPhaseNumber("I");
        cpd.setDiseaseName(pwr.getDiseaseName());
        cpd.setDoseLevel(Double.valueOf(dosejTextField.getText()));
        cpd.setActiveDate(new Date());
       // for(pwr.getDiseaseName()
        
        for(Disease d :organization.getDd().getDisease()){
            
            if(d.equals(pwr.getDiseaseName()))
            {
                d.addClinicalDrug(cpd);               
            }
        }
        
        //add work Queue of both ND organisation 
        
        
         Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof NewDrugApprovalOrganisation){
                org = organization;
                break;
            }
        }
        
        //Creating ClinicalWorkRequest and setting ClinicalDrug and adding in Queue for New Drug Approval Organisation 
        ClinicalDrugPhaseOneTestWorkRequest cdtwr = new ClinicalDrugPhaseOneTestWorkRequest();
         
        cdtwr.setCpd(cpd);

        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(cdtwr);
            NewDrugApprovalOrganisation drugAp = (NewDrugApprovalOrganisation)org;
            drugAp.setDiseasediretory(organization.getDd());
            
             
        }
        JOptionPane.showMessageDialog(null, " Drug Approved for Phase I  ");
        
        
            }
            else{
                JOptionPane.showMessageDialog(null, "Please Enter the Dose Level");
            }
        }
        catch(Exception e ){JOptionPane.showMessageDialog(null, "Please Enter valid dose level s input");}
        

        
    }//GEN-LAST:event_appriveDrugjButtonActionPerformed

    private void dosejTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dosejTextFieldKeyPressed
        // TODO add your handling code here:
         int keyp = evt.getKeyCode();
        if (keyp == 46) {
            keyp = 110;
        }
        if ((keyp == KeyEvent.VK_BACKSPACE) || (keyp >= evt.VK_0 && keyp <= evt.VK_9 || (keyp == evt.VK_DECIMAL))) {
            dosejTextField.setEditable(true);
            dosejTextField.setBackground(Color.YELLOW);

        } else {
            dosejTextField.setEditable(false);
            dosejTextField.setBackground(Color.red);
            // getToolkit().beep();
            JOptionPane.showMessageDialog(null, " Characters Prohibited ");
            dosejTextField.setBackground(Color.WHITE);
            // userNamejTextField.requestFocusInWindow();
        }
    }//GEN-LAST:event_dosejTextFieldKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appriveDrugjButton;
    private javax.swing.JButton backjButton;
    private javax.swing.JTextField cellViabilityjTextField;
    private javax.swing.JTextField dosejTextField;
    private javax.swing.JButton getDesignjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField rosjTextField;
    private javax.swing.JTable titerSetupjTable;
    private javax.swing.JComboBox titerjComboBox;
    // End of variables declaration//GEN-END:variables

    private void populateComboBox() {
        titerjComboBox.removeAllItems();
        
        for(TiterTest tt: pwr.getTiterPlate())
        {
            
            titerjComboBox.addItem(tt);
        }
        
    }

    private void populateTiterTable(TiterTest titer) {
       DefaultTableModel model = (DefaultTableModel) titerSetupjTable.getModel();

        model.setRowCount(0);  
          
             
            Object[] row = new Object[7];
            row[0] = titer;
            row[1] = titer.getTotalNumberofAssay();
            row[2] = titer.getMediumQuantity();
            row[3] = titer.getTiterTest() == null ? "Pending" : titer.getTiterTest();
            if(titer.getTiterTest() == null){dosejTextField.setEnabled(false);}
            
            
            model.addRow(row);   
            if(model.getRowCount() <= 0)
        {
            JOptionPane.showConfirmDialog(null,"No Tests available");
                    }
              DecimalFormat df = new DecimalFormat("#.##");
        df.setRoundingMode(RoundingMode.CEILING);
        
            cellViabilityjTextField.setText(String.valueOf(df.format(titer.getCellViability())));
            rosjTextField.setText(String.valueOf(df.format(titer.getRos())));

            
        }
    
     private JFreeChart createChart(XYDataset dataset) {

        // create the chart...
        JFreeChart chart = ChartFactory.createXYLineChart(
            "Titer Plates Result ", // chart title
            "Total Number of People", // x axis label
            "Cell Viability /Dosage", // y axis label
            dataset,  // initial series
            PlotOrientation.VERTICAL, // orientation
            true, // include legend
            true, // tooltips?
            false // URLs?
            );

        // set chart background
        chart.setBackgroundPaint(Color.white);

        // set a few custom plot features
        XYPlot plot = (XYPlot) chart.getPlot();
       // plot.setBackgroundPaint(new Color(0xffffe0));
        plot.setDomainGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.lightGray);
        plot.setRangeGridlinePaint(Color.lightGray);

        // set the plot's axes to display integers
        TickUnitSource ticks = NumberAxis.createIntegerTickUnits();
        NumberAxis domain = (NumberAxis) plot.getDomainAxis();
        domain.setStandardTickUnits(ticks);
        NumberAxis range = (NumberAxis) plot.getRangeAxis();
        range.setStandardTickUnits(ticks);

        // render shapes and lines
        XYLineAndShapeRenderer renderer =
            new XYLineAndShapeRenderer(true, true);
        plot.setRenderer(renderer);
        renderer.setBaseShapesVisible(true);
        renderer.setBaseShapesFilled(true);

        // set the renderer's stroke
        Stroke stroke = new BasicStroke(
            3f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL);
        renderer.setBaseOutlineStroke(stroke);

        // label the points
        NumberFormat format = NumberFormat.getNumberInstance();
        format.setMaximumFractionDigits(2);
        XYItemLabelGenerator generator =
            new StandardXYItemLabelGenerator(
                StandardXYItemLabelGenerator.DEFAULT_ITEM_LABEL_FORMAT,
                format, format);
        renderer.setBaseItemLabelGenerator(generator);
        renderer.setBaseItemLabelsVisible(true);

        return chart;
    }
     
       private double[][] createSeries(int mean,int total,double cell) {
        double[][] series = new double[2][total];
        for (int i = 0; i < total; i++) {
            series[0][i] = (double) i;                    //X axis 
            series[1][i] = cell +random.nextGaussian();  // Y Axis
            
        }
        return series;
    }
       
    
}
